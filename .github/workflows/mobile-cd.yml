name: Mobile Continuous Deployment (CD)

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Type of version bump'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'
      release_notes:
        description: 'Additional release notes (optional)'
        required: false
        type: string

jobs:
  version-and-build:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      version_code: ${{ steps.version.outputs.version_code }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Set up Firebase Configuration for Release
      run: |
        echo "üî• Setting up Firebase for production release..."
        
        # Check if Firebase configuration secret is available
        if [ -z "${{ secrets.GOOGLE_SERVICES_JSON }}" ]; then
          echo "‚ö†Ô∏è GOOGLE_SERVICES_JSON secret not found."
          echo "Using default configuration - Crashlytics will be disabled."
          echo "To enable Crashlytics for releases, add your google-services.json as a base64 encoded repository secret."
        else
          echo "‚úÖ Firebase configuration secret found. Setting up for production release."
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > mobile/composeApp/google-services.json
          echo "üî• Firebase Crashlytics enabled for this release build."
        fi

    - name: Make gradlew executable
      run: chmod +x mobile/gradlew
    
    - name: Initialize Gradle wrapper
      run: |
        cd mobile
        gradle wrapper --gradle-version 8.11.1
    
    - name: Get current version and calculate new version
      id: version
      run: |
        cd mobile
        
        # Get current version from build.gradle.kts
        CURRENT_VERSION=$(grep 'versionName = ' composeApp/build.gradle.kts | sed 's/.*versionName = "\(.*\)".*/\1/')
        CURRENT_CODE=$(grep 'versionCode = ' composeApp/build.gradle.kts | sed 's/.*versionCode = \(.*\)/\1/')
        
        echo "Current version: $CURRENT_VERSION"
        echo "Current version code: $CURRENT_CODE"
        
        # Parse semantic version
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Bump version based on input
        case "${{ github.event.inputs.version_bump }}" in
          "major")
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          "minor")
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          "patch")
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        NEW_VERSION_CODE=$((CURRENT_CODE + 1))
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version_code=$NEW_VERSION_CODE" >> $GITHUB_OUTPUT
        
        echo "New version: $NEW_VERSION"
        echo "New version code: $NEW_VERSION_CODE"
    
    - name: Update version in build.gradle.kts
      run: |
        cd mobile
        sed -i "s/versionName = \".*\"/versionName = \"${{ steps.version.outputs.new_version }}\"/" composeApp/build.gradle.kts
        sed -i "s/versionCode = .*/versionCode = ${{ steps.version.outputs.version_code }}/" composeApp/build.gradle.kts
    
    - name: Generate changelog
      id: changelog
      run: |
        cd mobile
        
        # Get the last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          echo "No previous tags found, generating changelog from all commits"
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          echo "Generating changelog since $LAST_TAG"
          COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # Create changelog content
        CHANGELOG="## What's Changed in v${{ steps.version.outputs.new_version }}
        
        $COMMITS"
        
        if [ ! -z "${{ github.event.inputs.release_notes }}" ]; then
          CHANGELOG="$CHANGELOG
        
        ## Additional Notes
        ${{ github.event.inputs.release_notes }}"
        fi
        
        # Save changelog to file
        echo "$CHANGELOG" > CHANGELOG.md
        
        # Save changelog to output (escape newlines)
        {
          echo 'changelog<<EOF'
          echo "$CHANGELOG"
          echo 'EOF'
        } >> $GITHUB_OUTPUT
    
    - name: Commit version bump
      run: |
        cd mobile
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add composeApp/build.gradle.kts
        git commit -m "Bump version to v${{ steps.version.outputs.new_version }}"
        git push
    
    - name: Create and push tag
      run: |
        cd mobile
        git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
        git push origin "v${{ steps.version.outputs.new_version }}"
    
    - name: Build Android AAB
      run: |
        cd mobile
        ./gradlew :composeApp:bundleRelease
    
    - name: Sign Android AAB
      uses: r0adkll/sign-android-release@v1.0.4
      id: sign_aab
      with:
        releaseDirectory: mobile/composeApp/build/outputs/bundle/release
        signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
        alias: ${{ secrets.ANDROID_KEY_ALIAS }}
        keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
    
    - name: Upload AAB artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-aab
        path: mobile/composeApp/build/outputs/bundle/release/*.aab

  build-ios:
    runs-on: macos-latest  # Use latest available macOS runner
    timeout-minutes: 45  # Add overall timeout
    needs: version-and-build
    if: always()  # Run even if version-and-build has issues
    
    steps:
    - name: Debug - Job Started
      run: |
        echo "üöÄ iOS build job started successfully!"
        echo "üìÖ Job started at: $(date)"
        echo "üñ•Ô∏è Runner OS: ${{ runner.os }}"
        echo "üìç Working directory: $(pwd)"
        echo "üë§ Runner user: $(whoami)"
        echo "üîç Available disk space:"
        df -h
        echo "üíæ Available memory:"
        vm_stat || echo "vm_stat not available"
        echo "üìÇ Current directory contents:"
        ls -la
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
    
    - name: Debug - After Checkout
      run: |
        echo "‚úÖ Checkout completed successfully!"
        echo "üìÇ Repository contents:"
        ls -la
        echo "üì± Mobile directory exists:"
        ls -la mobile/ || echo "‚ùå Mobile directory not found"
        echo "üçé iOS app directory exists:"
        ls -la mobile/iosApp/ || echo "‚ùå iOS app directory not found"
    
    - name: Debug - Check Job Dependencies
      run: |
        echo "üîó Checking dependencies from version-and-build job:"
        echo "üìä New version: ${{ needs.version-and-build.outputs.new_version }}"
        echo "üî¢ Version code: ${{ needs.version-and-build.outputs.version_code }}"
        echo "‚úÖ Dependencies check completed"
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.konan
        key: ${{ runner.os }}-gradle-konan-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-konan-
          ${{ runner.os }}-gradle-
    
    - name: Set up Firebase and iOS Signing Configuration
      run: |
        echo "üî• Setting up Firebase for iOS production release..."
        
        # Set up Android Firebase config if available
        if [ ! -z "${{ secrets.GOOGLE_SERVICES_JSON }}" ]; then
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > mobile/composeApp/google-services.json
          echo "‚úÖ Android Firebase configuration set up."
        else
          echo "‚ö†Ô∏è Using default Android Firebase configuration."
        fi
        
        # Set up iOS Firebase config if available
        if [ ! -z "${{ secrets.IOS_FIREBASE_CONFIG_PLIST }}" ]; then
          echo '${{ secrets.IOS_FIREBASE_CONFIG_PLIST }}' > mobile/iosApp/iosApp/GoogleService-Info.plist
          echo "‚úÖ iOS Firebase configuration set up - Crashlytics enabled."
        else
          echo "‚ö†Ô∏è iOS Firebase configuration not found. Add IOS_FIREBASE_CONFIG_PLIST secret for iOS Crashlytics."
        fi
        
        echo "üîê Setting up iOS code signing..."
        
        # Set up iOS provisioning profile if available
        if [ ! -z "${{ secrets.IOS_PROVISIONING_PROFILE }}" ]; then
          echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 --decode > mobile/ios_provisioning_profile.mobileprovision
          echo "‚úÖ iOS provisioning profile configured."
        else
          echo "‚ö†Ô∏è iOS provisioning profile not found. Add IOS_PROVISIONING_PROFILE secret for signed builds."
        fi
        
        # Set up iOS distribution certificate if available
        if [ ! -z "${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}" ]; then
          echo "${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}" | base64 --decode > mobile/ios_distribution_certificate.p12
          echo "‚úÖ iOS distribution certificate configured."
        else
          echo "‚ö†Ô∏è iOS distribution certificate not found. Add IOS_DISTRIBUTION_CERTIFICATE secret for signed builds."
        fi

    - name: Make gradlew executable
      run: chmod +x mobile/gradlew
    
    - name: Initialize Gradle wrapper
      run: |
        cd mobile
        gradle wrapper --gradle-version 8.11.1
    
    - name: Configure Gradle for CI
      run: |
        cd mobile
        # Create gradle.properties for CI optimization
        cat >> gradle.properties << EOF
        # CI Optimizations
        org.gradle.jvmargs=-Xmx6g -XX:MaxMetaspaceSize=1g -XX:+UseG1GC
        org.gradle.parallel=false
        org.gradle.daemon=false
        org.gradle.configureondemand=false
        
        # Kotlin/Native optimizations
        kotlin.native.ignoreDisabledTargets=true
        kotlin.native.useXcodeMessageStyle=true
        kotlin.incremental.native=false
        
        # Disable unnecessary features for CI
        android.useAndroidX=true
        android.enableJetifier=false
        EOF
    
    - name: Build iOS Framework (Sequential)
      timeout-minutes: 30
      run: |
        cd mobile
        echo "üî® Building iOS framework targets sequentially to avoid memory issues..."
        
        # Build each target separately to reduce memory pressure
        echo "üì± Building iOS Arm64 target..."
        ./gradlew :composeApp:linkReleaseFrameworkIosArm64 --no-daemon --max-workers=1
        
        echo "üì± Building iOS Simulator Arm64 target..."
        ./gradlew :composeApp:linkReleaseFrameworkIosSimulatorArm64 --no-daemon --max-workers=1
        
        echo "üîó Creating XCFramework from pre-built frameworks..."
        # Use xcodebuild to create XCFramework from already built individual frameworks
        cd composeApp/build/bin
        
        # Check if all individual frameworks exist
        echo "üìã Checking for individual frameworks:"
        ls -la iosArm64/releaseFramework/ || echo "‚ùå iosArm64 framework missing"
        ls -la iosSimulatorArm64/releaseFramework/ || echo "‚ùå iosSimulatorArm64 framework missing"
        
        # Create XCFramework directory
        mkdir -p ../XCFrameworks/release/
        
        # Create XCFramework using xcodebuild (ARM64 targets only)
        if xcodebuild -create-xcframework \
          -framework iosArm64/releaseFramework/ComposeApp.framework \
          -framework iosSimulatorArm64/releaseFramework/ComposeApp.framework \
          -output ../XCFrameworks/release/ComposeApp.xcframework; then
          echo "‚úÖ XCFramework created successfully"
        else
          echo "‚ö†Ô∏è XCFramework creation failed, creating individual framework archives as fallback"
          # Create individual framework archives for distribution
          mkdir -p ../frameworks/release/
          tar -czf ../frameworks/release/ComposeApp-iosArm64.tar.gz -C iosArm64/releaseFramework/ .
          tar -czf ../frameworks/release/ComposeApp-iosSimulatorArm64.tar.gz -C iosSimulatorArm64/releaseFramework/ .
          echo "üì¶ Individual framework archives created as fallback"
        fi
        
        echo "‚úÖ XCFramework created successfully"
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'  # Use latest available version
    
    - name: Check and Fix Xcode Project Compatibility
      run: |
        cd mobile/iosApp
        echo "üîç Checking Xcode version and project compatibility..."
        
        # Check current Xcode version
        xcodebuild -version
        
        # List available Xcode versions on this runner
        ls -la /Applications/ | grep Xcode || echo "No Xcode applications found"
        
        # Check if project can be opened
        echo "üìã Attempting to read project info..."
        if ! xcodebuild -project iosApp.xcodeproj -list >/dev/null 2>&1; then
          echo "‚ö†Ô∏è Project format incompatibility detected. Attempting to fix..."
          
          # Try to use a different Xcode version if available
          if [ -d "/Applications/Xcode_16.0.app" ]; then
            echo "üîÑ Switching to Xcode 16.0..."
            sudo xcode-select -s /Applications/Xcode_16.0.app
          elif [ -d "/Applications/Xcode_15.4.app" ]; then
            echo "üîÑ Switching to Xcode 15.4..."
            sudo xcode-select -s /Applications/Xcode_15.4.app
          elif [ -d "/Applications/Xcode.app" ]; then
            echo "üîÑ Switching to default Xcode..."
            sudo xcode-select -s /Applications/Xcode.app
          fi
          
          # Check again after switching
          xcodebuild -version
          xcodebuild -project iosApp.xcodeproj -list || echo "‚ùå Project still incompatible, but continuing..."
        else
          echo "‚úÖ Project compatibility confirmed"
        fi
    
    - name: Create exportOptions.plist
      run: |
        cd mobile
        
        # Create appropriate exportOptions.plist based on signing availability
        if [ -f "ios_distribution_certificate.p12" ] && [ -f "ios_provisioning_profile.mobileprovision" ]; then
          echo "üìù Creating exportOptions.plist for signed build..."
          cat > exportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>ad-hoc</string>
            <key>teamID</key>
            <string>\${{ secrets.APPLE_TEAM_ID }}</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
        </dict>
        </plist>
        EOF
        else
          echo "üìù Creating exportOptions.plist for development build..."
          cat > exportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>development</string>
            <key>teamID</key>
            <string>\${{ secrets.APPLE_TEAM_ID }}</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <false/>
        </dict>
        </plist>
        EOF
        fi
    
    - name: Install iOS Certificate and Provisioning Profile
      run: |
        echo "üîê Installing iOS signing credentials..."
        
        # Check if signing credentials are available
        if [ -f "mobile/ios_distribution_certificate.p12" ] && [ -f "mobile/ios_provisioning_profile.mobileprovision" ]; then
          echo "‚úÖ Both certificate and provisioning profile found"
          
          # Create keychain
          security create-keychain -p "temp_keychain_password" ios_signing.keychain
          security default-keychain -s ios_signing.keychain
          security unlock-keychain -p "temp_keychain_password" ios_signing.keychain
          security set-keychain-settings -t 3600 -l ios_signing.keychain
          
          # Import certificate
          security import mobile/ios_distribution_certificate.p12 -k ios_signing.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "temp_keychain_password" ios_signing.keychain
          
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          # Get the UUID from the provisioning profile for proper naming
          PROFILE_UUID=$(security cms -D -i mobile/ios_provisioning_profile.mobileprovision | plutil -extract UUID raw -)
          cp mobile/ios_provisioning_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
          echo "üì± Provisioning profile installed with UUID: $PROFILE_UUID"
          
          echo "‚úÖ iOS signing credentials installed successfully"
          echo "SIGNING_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "‚ö†Ô∏è iOS signing credentials not available, will build unsigned"
          echo "SIGNING_AVAILABLE=false" >> $GITHUB_ENV
        fi
    
    - name: Build iOS IPA
      timeout-minutes: 15
      run: |
        cd mobile/iosApp
        
        echo "üçé Building iOS app archive..."
        echo "üìç Current directory: $(pwd)"
        echo "üìÇ Directory contents:"
        ls -la
        echo "üîç Xcode version:"
        xcodebuild -version
        echo "‚öôÔ∏è Available schemes:"
        xcodebuild -project iosApp.xcodeproj -list
        
        # Check if we can build with current Xcode setup
        if xcodebuild -project iosApp.xcodeproj -list >/dev/null 2>&1; then
          echo "‚úÖ Xcode project compatible, proceeding with build..."
          
          if [ "$SIGNING_AVAILABLE" = "true" ]; then
            echo "üîê Building signed IPA..."
            echo "‚è±Ô∏è Starting archive build at $(date)"
            # Configure build settings for signed build
            xcodebuild \
              -project iosApp.xcodeproj \
              -scheme iosApp \
              -configuration Release \
              -destination generic/platform=iOS \
              -archivePath build/iosApp.xcarchive \
              archive \
              APPLE_TEAM_ID="${{ secrets.APPLE_TEAM_ID }}" \
              CODE_SIGN_STYLE=Manual \
              DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
              CODE_SIGN_IDENTITY="iPhone Distribution"
            
            echo "‚úÖ Archive completed at $(date)"
            echo "üì¶ Exporting signed IPA..."
            echo "‚è±Ô∏è Starting IPA export at $(date)"
            # Export IPA
            xcodebuild \
              -archivePath build/iosApp.xcarchive \
              -exportArchive \
              -exportPath build/ \
              -exportOptionsPlist ../exportOptions.plist
            
            echo "‚úÖ IPA export completed at $(date)"
          else
            echo "‚ö†Ô∏è Building unsigned archive..."
            echo "‚è±Ô∏è Starting unsigned archive build at $(date)"
            # Configure build settings for unsigned build
            xcodebuild \
              -project iosApp.xcodeproj \
              -scheme iosApp \
              -configuration Release \
              -destination generic/platform=iOS \
              -archivePath build/iosApp.xcarchive \
              archive \
              CODE_SIGN_STYLE=Manual \
              CODE_SIGN_IDENTITY="" \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGNING_ALLOWED=NO \
              DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}"
            
            echo "‚úÖ Unsigned archive completed at $(date)"
            echo "üì¶ Creating unsigned app bundle..."
            # Create unsigned app for distribution
            cp -r build/iosApp.xcarchive/Products/Applications/iosApp.app build/
            echo "‚úÖ Unsigned iOS app created at build/iosApp.app"
          fi
          
          echo "‚úÖ iOS build completed successfully"
        else
          echo "‚ö†Ô∏è Xcode project incompatibility detected, creating framework archive instead..."
          
          # Create a distributable framework archive as fallback
          cd ../
          echo "üì¶ Creating iOS framework distribution archive..."
          tar -czf iosApp-framework-distribution.tar.gz -C composeApp/build/XCFrameworks/release/ .
          
          # Create a placeholder for the IPA to maintain workflow compatibility
          mkdir -p iosApp/build/
          echo "iOS Framework Distribution - IPA build skipped due to Xcode compatibility issues" > iosApp/build/framework-only.txt
          
          echo "‚ö†Ô∏è Framework archive created instead of IPA due to Xcode version compatibility"
        fi
    
    - name: Upload iOS Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-ipa
        path: |
          mobile/iosApp/build/*.ipa
          mobile/iosApp/build/*.txt
          mobile/iosApp-framework-distribution.tar.gz
          mobile/composeApp/build/XCFrameworks/release/*.xcframework
          mobile/composeApp/build/frameworks/release/*.tar.gz

  create-release:
    runs-on: ubuntu-latest
    needs: [version-and-build, build-ios]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
    
    - name: Download Android AAB
      uses: actions/download-artifact@v4
      with:
        name: android-aab
        path: ./artifacts/
    
    - name: Download iOS IPA
      uses: actions/download-artifact@v4
      with:
        name: ios-ipa
        path: ./artifacts/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.version-and-build.outputs.new_version }}
        name: Release v${{ needs.version-and-build.outputs.new_version }}
        body: ${{ needs.version-and-build.outputs.changelog }}
        draft: false
        prerelease: false
        files: |
          artifacts/*.aab
          artifacts/*.ipa
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Notify completion
      run: |
        echo "üéâ Release v${{ needs.version-and-build.outputs.new_version }} created successfully!"
        echo "üì± Android AAB and iOS IPA files have been uploaded to the release."
        echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.version-and-build.outputs.new_version }}"