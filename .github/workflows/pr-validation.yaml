name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.jvmargs="-Xmx4g"

jobs:
  pr-info:
    name: PR Information
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    outputs:
      has-android-changes: ${{ steps.changes.outputs.android }}
      has-ios-changes: ${{ steps.changes.outputs.ios }}
      has-shared-changes: ${{ steps.changes.outputs.shared }}
      has-docs-changes: ${{ steps.changes.outputs.docs }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            android:
              - 'mobile/composeApp/**'
              - 'mobile/**/*.gradle.kts'
              - 'mobile/gradle/**'
            ios:
              - 'mobile/iosApp/**'
              - 'mobile/**/*.swift'
            shared:
              - 'mobile/composeApp/**'
              - 'mobile/**/*.kt'
            docs:
              - 'docs/**'
              - '*.md'
              - '.github/**'
      
      - name: PR Summary
        run: |
          echo "## üìã Pull Request Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR #${{ github.event.pull_request.number }}**: ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author**: @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
          echo "**Base**: ${{ github.event.pull_request.base.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "**Head**: ${{ github.event.pull_request.head.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "- Android: ${{ steps.changes.outputs.android }}" >> $GITHUB_STEP_SUMMARY
          echo "- iOS: ${{ steps.changes.outputs.ios }}" >> $GITHUB_STEP_SUMMARY
          echo "- Shared: ${{ steps.changes.outputs.shared }}" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation: ${{ steps.changes.outputs.docs }}" >> $GITHUB_STEP_SUMMARY

  pr-title-check:
    name: Validate PR Title
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Label dependency updates
        uses: actions/github-script@v7
        if: startsWith(github.event.pull_request.title, 'Bump ') || startsWith(github.event.pull_request.title, 'Update ')
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['dependencies']
            });
      
      - name: Check PR Title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            chore
            ci
            build
          requireScope: false
          disallowScopes: |
            release
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.
          # Skip validation for dependency update PRs
          ignoreLabels: |
            dependencies

  size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const additions = pr.data.additions;
            const deletions = pr.data.deletions;
            const changedFiles = pr.data.changed_files;
            const totalChanges = additions + deletions;
            
            let size = 'XS';
            let color = '0e8a16';
            
            if (totalChanges > 1000 || changedFiles > 30) {
              size = 'XXL';
              color = 'b60205';
            } else if (totalChanges > 500 || changedFiles > 20) {
              size = 'XL';
              color = 'd93f0b';
            } else if (totalChanges > 200 || changedFiles > 10) {
              size = 'L';
              color = 'fbca04';
            } else if (totalChanges > 50 || changedFiles > 5) {
              size = 'M';
              color = 'ffed4e';
            } else if (totalChanges > 10 || changedFiles > 2) {
              size = 'S';
              color = '0e8a16';
            }
            
            // Add size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [`size/${size}`]
            });
            
            // Add comment if PR is too large
            if (size === 'XXL') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚ö†Ô∏è **Large PR Warning**\n\nThis PR is quite large (${totalChanges} lines changed, ${changedFiles} files). Consider:\n- Breaking it into smaller, focused PRs\n- Ensuring adequate testing\n- Providing detailed description and context\n- Requesting additional reviewers`
              });
            }

  lint-check:
    name: Lint & Code Style
    runs-on: ubuntu-latest
    needs: pr-info
    if: github.event.pull_request.draft == false && (needs.pr-info.outputs.has-shared-changes == 'true' || needs.pr-info.outputs.has-android-changes == 'true')
    permissions:
      contents: read
      issues: write
      pull-requests: write
      checks: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
          
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Run Detekt
        run: ./gradlew detekt --continue
        working-directory: mobile
        continue-on-error: true
        
      - name: Run ktlint
        run: ./gradlew ktlintCheck
        working-directory: mobile
        continue-on-error: true
        
      - name: Parse Detekt Results and Comment
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const globModule = require('@actions/glob');
            const path = require('path');
            
            try {
              const globber = await globModule.create('mobile/**/build/reports/detekt/detekt.xml');
              const files = await globber.glob();
              
              let totalIssues = 0;
              let detailedResults = '';
              
              for (const file of files) {
                const content = fs.readFileSync(file, 'utf8');
                const moduleIssues = (content.match(/<error/g) || []).length;
                totalIssues += moduleIssues;
                
                const moduleName = file.includes('/backend/') ? 'Backend' : 'Mobile';
                detailedResults += `- **${moduleName}**: ${moduleIssues} issue(s)\n`;
              }
              
              let comment = '## üîç Detekt Code Quality Report\n\n';
              
              if (totalIssues === 0) {
                comment += '‚úÖ **Excellent!** No Detekt issues found in your code.\n\n';
                comment += 'Your code follows all the configured quality standards!\n';
              } else {
                comment += `‚ö†Ô∏è **Found ${totalIssues} Detekt issue(s)** across modules:\n\n`;
                comment += detailedResults + '\n';
                comment += '### üîß Next Steps:\n';
                comment += '1. Check the [full Detekt report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details\n';
                comment += '2. Run `./gradlew detekt` locally to see specific issues\n';
                comment += '3. Many issues can be auto-fixed with `./gradlew detektFormat` (if available)\n';
                comment += '4. Review the detekt.yml configuration for rule explanations\n';
              }
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            } catch (error) {
              console.log('Could not process Detekt results:', error.message);
            }
        
      - name: Upload Detekt reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: detekt-pr-report
          path: 'mobile/**/build/reports/detekt/'
          retention-days: 7

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [pr-info, lint-check]
    if: github.event.pull_request.draft == false && always() && !cancelled()
    
    strategy:
      matrix:
        variant: [Debug, Release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
          
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Build ${{ matrix.variant }}
        run: ./gradlew composeApp:assemble${{ matrix.variant }}
        working-directory: mobile
        
      - name: Check build outputs
        run: |
          if [ "${{ matrix.variant }}" = "Debug" ]; then
            ls -la mobile/composeApp/build/outputs/apk/debug/ || echo "Debug APK not found"
          else
            ls -la mobile/composeApp/build/outputs/apk/release/ || echo "Release build may require signing"
          fi

  test-validation:
    name: Test Validation
    runs-on: ubuntu-latest
    needs: pr-info
    if: github.event.pull_request.draft == false
    permissions:
      contents: read
      issues: write
      pull-requests: write
      checks: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
          
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Run Unit Tests
        run: ./gradlew test
        working-directory: mobile
        
      - name: Generate Test Summary
        if: always()
        run: |
          echo "## üß™ Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          total_tests=0
          total_failures=0
          total_skipped=0
          
          for xml_file in mobile/**/build/test-results/**/TEST-*.xml; do
            if [ -f "$xml_file" ]; then
              tests=$(grep '<testsuite' "$xml_file" | sed -n 's/.*tests="\([0-9]*\)".*/\1/p' | head -1)
              failures=$(grep '<testsuite' "$xml_file" | sed -n 's/.*failures="\([0-9]*\)".*/\1/p' | head -1)
              errors=$(grep '<testsuite' "$xml_file" | sed -n 's/.*errors="\([0-9]*\)".*/\1/p' | head -1)
              skipped=$(grep '<testsuite' "$xml_file" | sed -n 's/.*skipped="\([0-9]*\)".*/\1/p' | head -1)
              
              tests=${tests:-0}
              failures=${failures:-0}
              errors=${errors:-0}
              skipped=${skipped:-0}
              
              total_tests=$((total_tests + tests))
              total_failures=$((total_failures + failures + errors))
              total_skipped=$((total_skipped + skipped))
            fi
          done
          
          passed=$((total_tests - total_failures - total_skipped))
          
          if [ $total_tests -eq 0 ]; then
            echo "üöß No tests found or executed" >> $GITHUB_STEP_SUMMARY
          elif [ $total_failures -eq 0 ]; then
            echo "‚úÖ **All $total_tests tests passed!** üéâ" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **$total_failures test(s) failed** out of $total_tests total tests" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ $total_tests -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Status | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| ‚úÖ Passed | $passed |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚ùå Failed | $total_failures |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚è≠Ô∏è Skipped | $total_skipped |" >> $GITHUB_STEP_SUMMARY
            echo "| üìä **Total** | **$total_tests** |" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Parse Test Results and Comment
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const globModule = require('@actions/glob');
            
            try {
              const globber = await globModule.create('mobile/**/build/test-results/**/TEST-*.xml');
              const files = await globber.glob();
              
              let totalTests = 0;
              let totalFailures = 0;
              let totalSkipped = 0;
              let moduleResults = [];
              
              for (const file of files) {
                const content = fs.readFileSync(file, 'utf8');
                
                // Simple regex parsing for test suite attributes
                const testsuiteMatch = content.match(/<testsuite[^>]*/);
                if (testsuiteMatch) {
                  const testsMatch = testsuiteMatch[0].match(/tests="(\d+)"/);  
                  const failuresMatch = testsuiteMatch[0].match(/failures="(\d+)"/);  
                  const errorsMatch = testsuiteMatch[0].match(/errors="(\d+)"/);  
                  const skippedMatch = testsuiteMatch[0].match(/skipped="(\d+)"/);  
                  
                  const tests = testsMatch ? parseInt(testsMatch[1]) : 0;
                  const failures = failuresMatch ? parseInt(failuresMatch[1]) : 0;
                  const errors = errorsMatch ? parseInt(errorsMatch[1]) : 0;
                  const skipped = skippedMatch ? parseInt(skippedMatch[1]) : 0;
                  
                  totalTests += tests;
                  totalFailures += failures + errors;
                  totalSkipped += skipped;
                  
                  const moduleName = file.includes('/backend/') ? 'Backend' : 
                                   file.includes('/mobile/') ? 'Mobile' : 'Unknown';
                  
                  moduleResults.push({
                    module: moduleName,
                    tests,
                    failures: failures + errors,
                    skipped,
                    passed: tests - failures - errors - skipped
                  });
                }
              }
              
              if (totalTests > 0) {
                let comment = '## üß™ Test Results Summary\n\n';
                
                if (totalFailures === 0) {
                  comment += `‚úÖ **All ${totalTests} tests passed!** üéâ\n\n`;
                } else {
                  comment += `‚ùå **${totalFailures} test(s) failed** out of ${totalTests} total tests\n\n`;
                }
                
                comment += '### üìä Module Breakdown:\n';
                comment += '| Module | ‚úÖ Passed | ‚ùå Failed | ‚è≠Ô∏è Skipped | Total |\n';
                comment += '|--------|---------|---------|----------|-------|\n';
                
                moduleResults.forEach(module => {
                  comment += `| ${module.module} | ${module.passed} | ${module.failures} | ${module.skipped} | ${module.tests} |\n`;
                });
                
                if (totalFailures > 0) {
                  comment += '\n### üîß Next Steps:\n';
                  comment += '1. Check the [detailed test report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) above\n';
                  comment += '2. Run tests locally: `./gradlew test`\n';
                  comment += '3. Fix failing tests before merging\n';
                }
                
                if (totalSkipped > 0) {
                  comment += `\nüìù **Note**: ${totalSkipped} test(s) were skipped.\n`;
                }
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not process test results:', error.message);
            }
          
      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-pr
          path: 'mobile/**/build/reports/tests/'
          retention-days: 7

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: pr-info
    if: github.event.pull_request.draft == false && needs.pr-info.outputs.has-shared-changes == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
          
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Build APK
        run: ./gradlew composeApp:assembleDebug
        working-directory: mobile
        
      - name: Check APK size
        run: |
          APK_FILE=$(find mobile/composeApp/build/outputs/apk/debug -name "*.apk" | head -1)
          APK_SIZE=$(du -h "$APK_FILE" | cut -f1)
          APK_SIZE_BYTES=$(du -b "$APK_FILE" | cut -f1)
          
          echo "APK Size: $APK_SIZE ($APK_SIZE_BYTES bytes)"
          echo "APK_SIZE=$APK_SIZE" >> $GITHUB_ENV
          echo "APK_SIZE_BYTES=$APK_SIZE_BYTES" >> $GITHUB_ENV
          
          # Alert if APK is larger than 50MB
          if [ $APK_SIZE_BYTES -gt 52428800 ]; then
            echo "‚ö†Ô∏è APK size is larger than 50MB"
            echo "APK_SIZE_WARNING=true" >> $GITHUB_ENV
          fi
        
      - name: Comment on APK size
        if: env.APK_SIZE_WARNING == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üì¶ **APK Size Warning**\n\nThe generated APK is ${{ env.APK_SIZE }}. Consider:\n- Reviewing dependencies for unused libraries\n- Enabling R8/ProGuard optimizations\n- Using APK analyzer to identify large resources\n- Implementing dynamic feature modules if appropriate`
            });

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: pr-info
    if: github.event.pull_request.draft == false && needs.pr-info.outputs.has-docs-changes == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/markdown-link-check.json'
          folder-path: 'mobile'
        continue-on-error: true

  auto-assign-reviewers:
    name: Auto-assign Reviewers
    runs-on: ubuntu-latest
    needs: pr-info
    if: github.event.pull_request.draft == false && github.event.action == 'opened'
    
    steps:
      - name: Auto-assign reviewers
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pullNumber = context.payload.pull_request.number;
            
            // Define reviewers based on changed files
            let reviewers = [];
            
            if (${{ needs.pr-info.outputs.has-android-changes }}) {
              reviewers.push('android-team-member'); // Replace with actual usernames
            }
            
            if (${{ needs.pr-info.outputs.has-ios-changes }}) {
              reviewers.push('ios-team-member'); // Replace with actual usernames
            }
            
            if (${{ needs.pr-info.outputs.has-shared-changes }}) {
              reviewers.push('kotlin-team-member'); // Replace with actual usernames
            }
            
            // Remove duplicates and the PR author
            reviewers = [...new Set(reviewers)].filter(reviewer => 
              reviewer !== context.payload.pull_request.user.login
            );
            
            if (reviewers.length > 0) {
              await github.rest.pulls.requestReviewers({
                owner,
                repo,
                pull_number: pullNumber,
                reviewers: reviewers.slice(0, 3) // Max 3 reviewers
              });
            }

  pr-validation-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [pr-info, pr-title-check, size-check, lint-check, build-validation, test-validation, performance-check]
    if: always() && github.event.pull_request.draft == false
    
    steps:
      - name: Validation Summary
        run: |
          echo "## ‚úÖ PR Validation Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| PR Title | ${{ needs.pr-title-check.result }} | Conventional commit format |" >> $GITHUB_STEP_SUMMARY
          echo "| Size Check | ${{ needs.size-check.result }} | PR size validation |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Style | ${{ needs.lint-check.result }} | Code quality checks |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build-validation.result }} | Debug & Release builds |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test-validation.result }} | Unit test execution |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-check.result }} | APK size and performance |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review any failed checks above" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure all conversations are resolved" >> $GITHUB_STEP_SUMMARY
          echo "- Wait for required reviewers approval" >> $GITHUB_STEP_SUMMARY
          echo "- Ready to merge once all checks pass ‚úÖ" >> $GITHUB_STEP_SUMMARY