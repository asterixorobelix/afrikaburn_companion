name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '20 19 * * 1'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ matrix.language == 'swift' && 'macos-latest' || 'ubuntu-latest' }}
    timeout-minutes: 360
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: java-kotlin
          build-mode: manual
          build-dir: backend
        - language: java-kotlin
          build-mode: manual
          build-dir: mobile
        - language: swift
          build-mode: manual
          build-dir: mobile

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      if: matrix.language == 'java-kotlin'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      if: matrix.language == 'java-kotlin'
      uses: gradle/actions/setup-gradle@v4
      with:
        gradle-version: 8.11.1

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}

    - name: Check for Backend Changes
      if: matrix.build-dir == 'backend'
      id: backend-changes
      run: |
        echo "Checking for backend-related changes..."
        # Check if this is a push/PR that affects backend files
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "Scheduled run - analyzing backend"
          echo "should-run=true" >> $GITHUB_OUTPUT
        else
          # For push/PR events, check if backend files were changed
          changed_files=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }} 2>/dev/null || git diff --name-only HEAD~1)
          if echo "$changed_files" | grep -E '^backend/|\.gradle\.kts$|gradle/' || [ -z "$changed_files" ]; then
            echo "Backend changes detected or unable to determine changes - analyzing backend"
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "No backend changes detected - skipping backend analysis"
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Build Backend
      if: matrix.language == 'java-kotlin' && matrix.build-dir == 'backend' && steps.backend-changes.outputs.should-run == 'true'
      run: |
        cd backend
        # Ensure Kotlin compilation is captured by CodeQL
        gradle compileKotlin
        gradle detekt
        gradle build -x test

    - name: Check for Mobile Changes
      if: matrix.build-dir == 'mobile'
      id: mobile-changes
      run: |
        echo "Checking for mobile-related changes..."
        # Check if this is a push/PR that affects mobile files
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "Scheduled run - analyzing mobile"
          echo "should-run=true" >> $GITHUB_OUTPUT
        else
          # For push/PR events, check if mobile files were changed
          changed_files=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }} 2>/dev/null || git diff --name-only HEAD~1)
          if echo "$changed_files" | grep -E '^mobile/|\.gradle\.kts$|gradle/' || [ -z "$changed_files" ]; then
            echo "Mobile changes detected or unable to determine changes - analyzing mobile"
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "No mobile changes detected - skipping mobile analysis"
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Setup Firebase Config for Mobile
      if: matrix.language == 'java-kotlin' && matrix.build-dir == 'mobile' && steps.mobile-changes.outputs.should-run == 'true'
      run: |
        # Check if the existing google-services.json file is valid
        if [ -f mobile/composeApp/google-services.json ]; then
          if python3 -m json.tool mobile/composeApp/google-services.json > /dev/null 2>&1; then
            echo "✅ Existing Firebase configuration file is valid"
            EXISTING_CONFIG_VALID=true
          else
            echo "⚠️ Existing Firebase configuration file is invalid"
            EXISTING_CONFIG_VALID=false
          fi
        else
          echo "ℹ️ No existing Firebase configuration file found"
          EXISTING_CONFIG_VALID=false
        fi
        
        # Try to use secret if available, but fall back to existing file
        if [ -n "${{ secrets.GOOGLE_SERVICES_JSON }}" ]; then
          echo "🔄 Attempting to decode Firebase config from secret..."
          if echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > mobile/composeApp/google-services.json.tmp 2>/dev/null; then
            # Verify the decoded file is valid JSON
            if python3 -m json.tool mobile/composeApp/google-services.json.tmp > /dev/null 2>&1; then
              echo "✅ Firebase config from secret is valid, using it"
              mv mobile/composeApp/google-services.json.tmp mobile/composeApp/google-services.json
            else
              echo "⚠️ Firebase config from secret is not valid JSON"
              rm -f mobile/composeApp/google-services.json.tmp
              if [ "$EXISTING_CONFIG_VALID" = "true" ]; then
                echo "✅ Keeping existing valid Firebase configuration"
              else
                echo "❌ No valid Firebase configuration available"
              fi
            fi
          else
            echo "⚠️ Failed to decode GOOGLE_SERVICES_JSON secret (invalid Base64)"
            rm -f mobile/composeApp/google-services.json.tmp
            if [ "$EXISTING_CONFIG_VALID" = "true" ]; then
              echo "✅ Keeping existing valid Firebase configuration"
            else
              echo "❌ No valid Firebase configuration available"
            fi
          fi
        else
          echo "ℹ️ GOOGLE_SERVICES_JSON secret not found"
          if [ "$EXISTING_CONFIG_VALID" = "true" ]; then
            echo "✅ Using existing valid Firebase configuration"
          else
            echo "ℹ️ Building without Firebase configuration"
          fi
        fi
        
        # Final status check and create template if needed
        if [ -f mobile/composeApp/google-services.json ]; then
          echo "ℹ️ Building with Firebase configuration"
        else
          echo "ℹ️ No Firebase configuration available, creating template file"
          # Create a minimal template google-services.json to prevent build failure
          echo '{
            "project_info": {
              "project_number": "000000000000",
              "project_id": "template-project",
              "storage_bucket": "template-project.appspot.com"
            },
            "client": [
              {
                "client_info": {
                  "mobilesdk_app_id": "1:000000000000:android:0000000000000000000000",
                  "android_client_info": {
                    "package_name": "io.asterixorobelix.afrikaburn"
                  }
                },
                "oauth_client": [],
                "api_key": [
                  {
                    "current_key": "AIzaSyDummyKeyForCodeQLAnalysis000000000000000"
                  }
                ],
                "services": {
                  "appinvite_service": {
                    "other_platform_oauth_client": []
                  }
                }
              }
            ],
            "configuration_version": "1"
          }' > mobile/composeApp/google-services.json
          echo "✅ Template Firebase configuration created for build compatibility"
        fi

    - name: Build Mobile
      if: matrix.language == 'java-kotlin' && matrix.build-dir == 'mobile' && steps.mobile-changes.outputs.should-run == 'true'
      run: |
        cd mobile
        gradle build -x test

    - name: Check for iOS Changes
      if: matrix.language == 'swift'
      id: ios-changes
      run: |
        echo "Checking for iOS-related changes..."
        # Check if this is a push/PR that affects iOS files
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "Scheduled run - analyzing iOS"
          echo "should-run=true" >> $GITHUB_OUTPUT
        else
          # For push/PR events, check if iOS files were changed
          changed_files=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }} 2>/dev/null || git diff --name-only HEAD~1)
          if echo "$changed_files" | grep -E '^mobile/.*\.swift$|^mobile/iosApp/|^mobile/.*iOS|\.gradle\.kts$|gradle/' || [ -z "$changed_files" ]; then
            echo "iOS changes detected or unable to determine changes - analyzing iOS"
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "No iOS changes detected - skipping iOS analysis"
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Setup Gradle for Swift
      if: matrix.language == 'swift' && steps.ios-changes.outputs.should-run == 'true'
      uses: gradle/actions/setup-gradle@v4
      with:
        gradle-version: 8.11.1

    - name: Setup Xcode
      if: matrix.language == 'swift' && steps.ios-changes.outputs.should-run == 'true'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Create dummy gradlew for iOS build
      if: matrix.language == 'swift' && steps.ios-changes.outputs.should-run == 'true'
      run: |
        cd mobile
        echo '#!/bin/bash' > gradlew
        echo 'gradle "$@"' >> gradlew
        chmod +x gradlew
    
    - name: Build iOS App
      if: matrix.language == 'swift' && steps.ios-changes.outputs.should-run == 'true'
      run: |
        cd mobile/iosApp
        xcodebuild -project iosApp.xcodeproj -scheme iosApp -destination 'platform=iOS Simulator,name=iPhone 16' -sdk iphonesimulator CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO

    - name: Perform CodeQL Analysis
      if: |
        (matrix.build-dir == 'backend' && steps.backend-changes.outputs.should-run == 'true') ||
        (matrix.build-dir == 'mobile' && matrix.language == 'java-kotlin' && steps.mobile-changes.outputs.should-run == 'true') ||
        (matrix.language == 'swift' && steps.ios-changes.outputs.should-run == 'true')
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}-${{matrix.build-dir}}"